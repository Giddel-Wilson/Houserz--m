<script lang="ts">
	import { onMount } from 'svelte';
	import { page } from '$app/stores';
	import { goto } from '$app/navigation';
	import { 
		ArrowLeft, 
		MapPin, 
		Bed, 
		Bath, 
		Heart,
		Home,
		MessageSquare,
		Settings,
		User,
		Calendar,
		LogOut,
		Menu,
		X,
		Phone,
		Mail,
		Square,
		Check as Badge,
		Building,
		ChevronLeft,
		ChevronRight,
		Share2,
		Eye
	} from 'lucide-svelte';

	// Get data from page load
	export let data;

	// State variables
	let user: any = null;
	let property: any = null;
	let loading = true;
	let error = '';
	let currentPage = 'property-details';
	let sidebarOpen = false;
	let isSaving = false;

	// Modal states
	let showScheduleModal = false;
	let showContactModal = false;

	// Form states
	let viewingDate = '';
	let viewingTime = '';
	let contactMessage = '';
	let submittingViewing = false;
	let submittingContact = false;
	let existingConversation: any = null;

	// Dashboard data
	let savedProperties: any[] = [];
	let viewingRequests: any[] = [];
	let messages: any[] = [];

	// Get property ID from URL params
	const propertyId = $page.params.id;

	onMount(() => {
		const userData = localStorage.getItem('user');
		if (!userData) {
			goto('/login');
			return;
		}
		
		user = JSON.parse(userData);
		if (user.role !== 'client' && user.role !== 'buyer') {
			goto('/');
			return;
		}

		// Use preloaded data if available, otherwise fetch
		if (data?.property) {
			property = data.property;
			loading = false;
		} else {
			loadProperty();
		}

		loadDashboardData();
	});

	async function loadProperty() {
		try {
			loading = true;
			error = '';
			
			console.log(`Loading property ID: ${propertyId}`);
			const token = localStorage.getItem('token');
			const response = await fetch(`/api/properties/${propertyId}`, {
				headers: {
					'Authorization': `Bearer ${token}`
				}
			});
			
			if (response.ok) {
				const data = await response.json();
				if (data.property) {
					property = data.property;
				} else {
					error = 'Property not found';
				}
			} else {
				error = 'Failed to load property';
			}
		} catch (err) {
			console.error('Error loading property:', err);
			error = 'Failed to load property details';
		} finally {
			loading = false;
		}
	}

	async function loadDashboardData() {
		try {
			const token = localStorage.getItem('token');
			
			// Load user favorites
			const favResponse = await fetch('/api/user/favorites', {
				headers: {
					'Authorization': `Bearer ${token}`
				}
			});

			if (favResponse.ok) {
				const favData = await favResponse.json();
				savedProperties = favData.favorites.slice(0, 3);
			}

			// Load viewing requests
			const viewingResponse = await fetch('/api/user/viewings', {
				headers: {
					'Authorization': `Bearer ${token}`
				}
			});

			if (viewingResponse.ok) {
				const viewingData = await viewingResponse.json();
				viewingRequests = viewingData.viewings || [];
			}

			// Load messages count
			messages = [];
		} catch (error) {
			console.error('Error loading dashboard data:', error);
		}
	}

	async function toggleSave() {
		if (!property) return;
		
		try {
			isSaving = true;
			const token = localStorage.getItem('token');
			
			if (property.isSaved) {
				// Remove from favorites
				const response = await fetch(`/api/user/favorites/${property.id}`, {
					method: 'DELETE',
					headers: {
						'Authorization': `Bearer ${token}`
					}
				});
				
				if (response.ok) {
					property.isSaved = false;
					await loadDashboardData();
				}
			} else {
				// Add to favorites
				const response = await fetch('/api/user/favorites', {
					method: 'POST',
					headers: {
						'Authorization': `Bearer ${token}`,
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({ property_id: property.id })
				});
				
				if (response.ok) {
					property.isSaved = true;
					await loadDashboardData();
				}
			}
		} catch (error) {
			console.error('Error toggling favorite:', error);
		} finally {
			isSaving = false;
		}
	}

	async function scheduleViewing() {
		if (!viewingDate || !viewingTime) {
			alert('Please select both date and time');
			return;
		}

		try {
			submittingViewing = true;
			const token = localStorage.getItem('token');
			
			const response = await fetch('/api/user/viewings', {
				method: 'POST',
				headers: {
					'Authorization': `Bearer ${token}`,
					'Content-Type': 'application/json'
				},
				body: JSON.stringify({
					property_id: property.id,
					preferred_date: viewingDate,
					preferred_time: viewingTime
				})
			});

			if (response.ok) {
				alert('Viewing request submitted successfully!');
				showScheduleModal = false;
				viewingDate = '';
				viewingTime = '';
				await loadDashboardData();
			} else {
				const errorData = await response.json();
				alert(errorData.error || 'Failed to schedule viewing');
			}
		} catch (error) {
			console.error('Error scheduling viewing:', error);
			alert('Failed to schedule viewing');
		} finally {
			submittingViewing = false;
		}
	}

	async function checkExistingConversation() {
		try {
			const token = localStorage.getItem('token');
			const response = await fetch(`/api/user/conversations?property_id=${property.id}&agent_id=${property.agent?.id}`, {
				headers: {
					'Authorization': `Bearer ${token}`
				}
			});

			if (response.ok) {
				const data = await response.json();
				return data.conversation || null;
			}
		} catch (error) {
			console.error('Error checking existing conversation:', error);
		}
		return null;
	}

	async function contactAgent() {
		if (!contactMessage.trim()) {
			alert('Please enter a message');
			return;
		}

		try {
			submittingContact = true;
			console.log('Contacting agent:', property.agent.id, 'about property:', property.id);
			
			// Add info about whether we're continuing a conversation
			const continuingConversation = !!existingConversation;
			console.log('Continuing conversation:', continuingConversation, 
						existingConversation ? `ID: ${existingConversation.id}` : '');
			
			// Prepare message with property information
			let enhancedMessage = contactMessage;
			
			// If this is a new conversation, include the property location and price to make it 
			// easier for the agent to identify which property the message is about
			if (!continuingConversation) {
				const propertyLocation = property.city ? 
					(property.state ? `${property.city}, ${property.state}` : property.city) : 
					(property.state || '');
					
				const propertyPrice = property.price ? 
					`₦${property.price.toLocaleString()}` : 
					'Price not specified';
					
				enhancedMessage = `Inquiry about: ${property.title}\nLocation: ${propertyLocation}\nPrice: ${propertyPrice}\n\n${contactMessage}`;
			}
			
			const token = localStorage.getItem('token');
			
			const messageData = {
				message: enhancedMessage,
				property_id: property.id,
				agent_id: property.agent.id
			};
			
			// If continuing a conversation, include the conversation ID
			if (continuingConversation) {
				messageData.conversation_id = existingConversation.id;
			}
			
			const response = await fetch('/api/user/messages', {
				method: 'POST',
				headers: {
					'Authorization': `Bearer ${token}`,
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(messageData)
			});

			if (response.ok) {
				const data = await response.json();
				showContactModal = false;
				contactMessage = '';
				alert(continuingConversation ? 
					'Reply sent successfully!' : 
					'Message sent successfully! The agent will get back to you soon.');
			} else {
				const error = await response.json();
				alert(error.message || 'Failed to send message');
			}
		} catch (error) {
			console.error('Error sending message:', error);
			alert('Failed to send message');
		} finally {
			submittingContact = false;
		}
	}

	function formatPrice(price: number): string {
		return `₦${price.toLocaleString()}`;
	}

	function formatFeatures(features: string): string[] {
		if (!features) return [];
		
		// Check if features is a JSON string
		try {
			const parsed = JSON.parse(features);
			if (Array.isArray(parsed)) {
				return parsed;
			}
			return features.split(',').map(f => f.trim());
		} catch (e) {
			// If not JSON, split by comma
			return features.split(',').map(f => f.trim());
		}
	}

	function goBack() {
		goto('/dashboard/properties');
	}

	function toggleSidebar() {
		sidebarOpen = !sidebarOpen;
	}

	function closeSidebar() {
		sidebarOpen = false;
	}

	function logout() {
		localStorage.removeItem('token');
		localStorage.removeItem('user');
		goto('/');
	}
</script>

<svelte:head>
	<title>{property ? property.title : 'Property Details'} - Houserz</title>
</svelte:head>

<div class="min-h-screen bg-gray-50 py-8">
	<div class="container mx-auto px-4">
		<!-- Back button -->
		<button on:click={goBack} class="mb-6 flex items-center text-gray-600 hover:text-gray-900">
			<ArrowLeft class="w-4 h-4 mr-2" />
			Back to Properties
		</button>

		<div class="flex flex-col lg:flex-row gap-6">
			<!-- Main Content -->
			<div class="flex-1">
				{#if loading}
					<div class="flex justify-center items-center py-16">
						<div class="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600"></div>
						<span class="ml-3 text-gray-600">Loading property details...</span>
					</div>
				{:else if error}
					<div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
						{error}
					</div>
				{:else if property}
					<!-- Property Gallery -->
					<div class="bg-white rounded-xl shadow-sm overflow-hidden mb-6">
						<div class="relative">
							{#if property.images && property.images.length > 0}
								<img 
									src={property.images[0].image_url || property.images[0].imageUrl} 
									alt={property.title}
									class="w-full h-64 md:h-96 object-cover"
								/>
							{:else}
								<div class="w-full h-64 md:h-96 bg-gray-200 flex items-center justify-center">
									<span class="text-gray-500">No image available</span>
								</div>
							{/if}
							
							<button
								on:click={toggleSave}
								class="absolute top-4 right-4 p-2 bg-white rounded-full shadow-md hover:bg-gray-50 transition-colors"
							>
								<Heart class="w-5 h-5 {property.isSaved ? 'text-red-500 fill-current' : 'text-gray-400'}" />
							</button>
						</div>
						
						<div class="p-6">
							<div class="flex flex-col md:flex-row md:justify-between md:items-start gap-4 mb-4">
								<h1 class="text-2xl md:text-3xl font-bold text-gray-900">{property?.title || 'Property Details'}</h1>
								<div class="text-right">
									<p class="text-3xl font-bold text-green-600">{formatPrice(property.price)}</p>
									<p class="text-sm text-gray-500 capitalize">{property.listingType}</p>
								</div>
							</div>
							
							<div class="flex items-center text-gray-600 mb-4">
								<MapPin class="w-5 h-5 mr-2 flex-shrink-0" />
								<span>{property.location}</span>
							</div>

							<!-- Property Stats -->
							<div class="grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-gray-50 rounded-lg">
								<div class="text-center">
									<div class="flex items-center justify-center mb-1">
										<Bed class="w-5 h-5 text-gray-600" />
									</div>
									<p class="text-lg font-semibold text-gray-900">{property.bedrooms || 0}</p>
									<p class="text-xs text-gray-500">Bedrooms</p>
								</div>
								<div class="text-center">
									<div class="flex items-center justify-center mb-1">
										<Bath class="w-5 h-5 text-gray-600" />
									</div>
									<p class="text-lg font-semibold text-gray-900">{property.bathrooms || 0}</p>
									<p class="text-xs text-gray-500">Bathrooms</p>
								</div>
								<div class="text-center">
									<div class="flex items-center justify-center mb-1">
										<Square class="w-5 h-5 text-gray-600" />
									</div>
									<p class="text-lg font-semibold text-gray-900">{property.sqft || 0}</p>
									<p class="text-xs text-gray-500">Square Feet</p>
								</div>
								<div class="text-center">
									<div class="flex items-center justify-center mb-1">
										<Eye class="w-5 h-5 text-gray-600" />
									</div>
									<p class="text-lg font-semibold text-gray-900">{property.viewsCount || 0}</p>
									<p class="text-xs text-gray-500">Views</p>
								</div>
							</div>
						</div>
					</div>

					<!-- Description -->
					{#if property.description}
						<div class="mb-6">
							<h3 class="text-lg font-semibold text-gray-900 mb-3">Description</h3>
							<p class="text-gray-600 leading-relaxed">{property.description}</p>
						</div>
					{/if}

					<!-- Property Details -->
					<div class="grid md:grid-cols-2 gap-6 mb-6">
						<div>
							<h3 class="text-lg font-semibold text-gray-900 mb-3">Property Details</h3>
							<div class="space-y-2">
								<div class="flex justify-between">
									<span class="text-gray-600">Property Type</span>
									<span class="font-medium text-gray-900">{property.propertyType || 'Not specified'}</span>
								</div>
								<div class="flex justify-between">
									<span class="text-gray-600">Year Built</span>
									<span class="font-medium text-gray-900">{property.yearBuilt || 'Not specified'}</span>
								</div>
								{#if property.lotSize}
									<div class="flex justify-between">
										<span class="text-gray-600">Lot Size</span>
										<span class="font-medium text-gray-900">{property.lotSize} sq ft</span>
									</div>
								{/if}
								<div class="flex justify-between">
									<span class="text-gray-600">Status</span>
									<span class="font-medium text-green-600 capitalize">{property.status}</span>
								</div>
							</div>
						</div>

						<div>
							<h3 class="text-lg font-semibold text-gray-900 mb-3">Location Details</h3>
							<div class="space-y-2">
								<div class="flex justify-between">
									<span class="text-gray-600">City</span>
									<span class="font-medium text-gray-900">{property.city || 'N/A'}</span>
								</div>
								<div class="flex justify-between">
									<span class="text-gray-600">State</span>
									<span class="font-medium text-gray-900">{property.state || 'N/A'}</span>
								</div>
								<div class="flex justify-between">
									<span class="text-gray-600">Neighborhood</span>
									<span class="font-medium text-gray-900">{property.neighborhood || 'Not specified'}</span>
								</div>
							</div>
						</div>
					</div>

					<!-- Features & Amenities -->
					{#if property.features && formatFeatures(property.features).length > 0}
						<div class="mb-6">
							<h3 class="text-lg font-semibold text-gray-900 mb-3">Features & Amenities</h3>
							<div class="grid grid-cols-2 md:grid-cols-3 gap-2">
								{#each formatFeatures(property.features) as feature}
									<div class="flex items-center space-x-2 text-gray-600">
										<div class="w-2 h-2 bg-green-500 rounded-full"></div>
										<span>{feature}</span>
									</div>
								{/each}
							</div>
						</div>
					{/if}

					<!-- Agent Information -->
					{#if property.agent}
						<div class="border-t pt-6">
							<h3 class="text-lg font-semibold text-gray-900 mb-4">Contact Agent</h3>
							<div class="bg-gray-50 rounded-lg p-4">
								<div class="flex items-start space-x-4">
									<div class="flex-shrink-0">
										<div class="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center">
											<span class="text-white font-semibold">
												{property.agent.fullName?.charAt(0) || property.agent.name?.charAt(0) || 'A'}
											</span>
										</div>
									</div>
									<div class="flex-1">
										<div class="flex items-center space-x-2 mb-1">
											<h4 class="font-semibold text-gray-900">
												{property.agent.fullName || property.agent.name || 'Unknown Agent'}
											</h4>
											{#if property.agent.isVerified}
												<Badge class="w-4 h-4 text-green-500" />
											{/if}
										</div>
										{#if property.agent.company}
											<p class="text-sm text-gray-600 mb-2 flex items-center">
												<Building class="w-4 h-4 mr-1" />
												{property.agent.company}
											</p>
										{/if}
										{#if property.agent.specialization}
											<p class="text-sm text-gray-600 mb-2">{property.agent.specialization}</p>
										{/if}
										{#if property.agent.bio}
											<p class="text-sm text-gray-600 mb-3">{property.agent.bio}</p>
										{/if}
										<div class="flex space-x-4">
											{#if property.agent.phone}
												<a
													href="tel:{property.agent.phone}"
													class="flex items-center text-green-600 hover:text-green-700 transition-colors"
												>
													<Phone class="w-4 h-4 mr-1" />
													<span class="text-sm">{property.agent.phone}</span>
												</a>
											{/if}
											{#if property.agent.email}
												<a
													href="mailto:{property.agent.email}"
													class="flex items-center text-green-600 hover:text-green-700 transition-colors"
												>
													<Mail class="w-4 h-4 mr-1" />
													<span class="text-sm">{property.agent.email}</span>
												</a>
											{/if}
										</div>
									</div>
								</div>
							</div>
						</div>
					{/if}

					<!-- Action Buttons -->
					<div class="border-t pt-6 mt-6">
						<div class="flex flex-col sm:flex-row gap-4">
							<button
								on:click={() => showScheduleModal = true}
								class="flex-1 bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium"
							>
								Schedule Viewing
							</button>
							<button
								on:click={async () => {
									existingConversation = await checkExistingConversation();
									showContactModal = true;
								}}
								class="flex-1 border border-green-600 text-green-600 px-6 py-3 rounded-lg hover:bg-green-50 transition-colors font-medium"
							>
								Contact Agent
							</button>
						</div>
					</div>
				{:else}
					<div class="text-center py-12">
						<div class="bg-white rounded-xl p-8 shadow-sm">
							<h3 class="text-lg font-medium text-gray-900 mb-2">No Property Data</h3>
							<p class="text-sm text-gray-500 mb-4">Unable to display property information. This could be due to missing data or an unexpected error.</p>
							<button
								on:click={() => goto('/dashboard/properties')}
								class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
							>
								Back to Properties
							</button>
						</div>
					</div>
				{/if}
			</div>

			<!-- Sidebar -->
			<div class="lg:w-72">
				<div class="bg-white rounded-xl shadow-sm p-6">
					<h2 class="text-lg font-semibold mb-4">Saved Properties</h2>
					
					{#if savedProperties.length > 0}
						<div class="space-y-4">
							{#each savedProperties as savedProperty}
								<div class="flex items-center space-x-3">
									<div class="flex-shrink-0">
										<img 
											src={savedProperty.image} 
											alt={savedProperty.title} 
											class="w-12 h-12 object-cover rounded-md"
											on:error={(e) => e.target.src = '/static/placeholder-house.jpg'}
										/>
									</div>
									<div class="flex-1 min-w-0">
										<p class="text-sm font-medium text-gray-900 truncate">{savedProperty.title}</p>
										<p class="text-xs text-gray-500 truncate">{savedProperty.location}</p>
									</div>
									<a href="/dashboard/properties/{savedProperty.id}" class="text-xs text-blue-600">View</a>
								</div>
							{/each}
							
							<a href="/dashboard/favorites" class="block mt-3 text-sm text-center text-green-600 hover:text-green-700">
								View all saved properties
							</a>
						</div>
					{:else}
						<p class="text-sm text-gray-500">You haven't saved any properties yet.</p>
					{/if}
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Schedule Viewing Modal -->
{#if showScheduleModal}
	<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
		<div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
			<h3 class="text-lg font-semibold text-gray-900 mb-4">Schedule a Viewing</h3>
			<p class="text-sm text-gray-600 mb-6">Choose your preferred date and time to view {property?.title}</p>
			
			<div class="space-y-4">
				<div>
					<label class="block text-sm font-medium text-gray-700 mb-1">Preferred Date</label>
					<input
						type="date"
						bind:value={viewingDate}
						min={new Date().toISOString().split('T')[0]}
						class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500"
					/>
				</div>
				
				<div>
					<label class="block text-sm font-medium text-gray-700 mb-1">Preferred Time</label>
					<select
						bind:value={viewingTime}
						class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500"
					>
						<option value="">Select a time</option>
						<option value="09:00">9:00 AM</option>
						<option value="10:00">10:00 AM</option>
						<option value="11:00">11:00 AM</option>
						<option value="12:00">12:00 PM</option>
						<option value="13:00">1:00 PM</option>
						<option value="14:00">2:00 PM</option>
						<option value="15:00">3:00 PM</option>
						<option value="16:00">4:00 PM</option>
						<option value="17:00">5:00 PM</option>
					</select>
				</div>
			</div>
			
			<div class="flex space-x-3 mt-6">
				<button
					on:click={() => showScheduleModal = false}
					class="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
				>
					Cancel
				</button>
				<button
					on:click={scheduleViewing}
					disabled={submittingViewing}
					class="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50"
				>
					{submittingViewing ? 'Submitting...' : 'Schedule Viewing'}
				</button>
			</div>
		</div>
	</div>
{/if}

<!-- Contact Agent Modal -->
{#if showContactModal}
	<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
		<div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
			<h3 class="text-lg font-semibold text-gray-900 mb-4">Contact Agent</h3>
			
			{#if existingConversation}
				<div class="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
					<p class="text-sm text-blue-800">
						<span class="font-semibold">Continuing conversation:</span> 
						{existingConversation.subject || 'About this property'}
					</p>
					
					{#if existingConversation.lastMessage}
						<p class="text-xs text-blue-600 mt-1">
							Last message: "{existingConversation.lastMessage.content?.substring(0, 50)}..."
						</p>
					{/if}
				</div>
			{/if}
			
			<p class="text-sm text-gray-600 mb-6">Send a message to {property?.agent?.fullName || property?.agent?.name || 'the agent'}</p>
			
			<div>
				<label class="block text-sm font-medium text-gray-700 mb-1">Your Message</label>
				<textarea
					bind:value={contactMessage}
					rows="4"
					placeholder={existingConversation ? 'Continue your conversation...' : "I'm interested in this property and would like to know more..."}
					class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500 resize-none"
				></textarea>
			</div>
			
			<div class="flex space-x-3 mt-6">
				<button
					on:click={() => showContactModal = false}
					class="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
				>
					Cancel
				</button>
				<button
					on:click={contactAgent}
					disabled={submittingContact}
					class="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50"
				>
					{submittingContact ? 'Sending...' : existingConversation ? 'Reply' : 'Send Message'}
				</button>
			</div>
		</div>
	</div>
{/if}
